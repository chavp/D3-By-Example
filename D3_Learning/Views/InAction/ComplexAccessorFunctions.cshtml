@{
    ViewBag.Title = "ComplexAccessorFunctions";
}

<style>
    svg {
        background-color: white;
        width: 1000px;
        height: 1000px;
    }

    line {
        shape-rendering: crispEdges;
        stroke: #000;
    }

    path.domain {
        fill: none;
        stroke: black;
    }

    .tick {
        opacity: 0.5;
    }

</style>

<h2>Complex Accessor Functions</h2>
<svg></svg>

@section scripts{
    <script>
        $(function () {
            d3.csv("@Url.Content("~/Content/data/movies.csv")",
                function (data) {
                    
                    var xScale = d3.scale.linear().domain([1, 8]).range([20, 470]);
                    var yScale = d3.scale.linear().domain([0, 35]).range([480, 20]);

                    var xAxis = d3.svg.axis()
                       .scale(xScale)
                       .orient("bottom")
                       .tickSize(800)
                       .tickValues([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);

                    d3.select("svg").append("g").attr("id", "xAxisG").call(xAxis);

                    var yAxis = d3.svg.axis()
                        .scale(yScale)
                        .orient("right")
                        .ticks(10)
                        .tickSize(600);

                    d3.select("svg").append("g").attr("id", "yAxisG").call(yAxis);

                    var fillScale = d3.scale.linear()
                                    .domain([0, 5])
                                    .range(["lightgray", "black"]);

                    var n = 0;
                    for (x in data[0]) {
                        if (x != "day") {
                            //var movieArea = d3.svg.area()
                            //    .x(function (d) {
                            //        return xScale(d.day);
                            //    })
                            //    .y(function (d) {
                            //        return yScale(d[x]);
                            //    })
                            //    .y0(function (d) {
                            //        return yScale(-d[x]);
                            //    })
                            //    .interpolate("cardinal");

                            var movieArea = d3.svg.area()
                                .x(function (d) {
                                    return xScale(d.day)
                                })
                                .y(function (d) {
                                    //return yScale(simpleStacking(d, x));
                                    return yScale(alternatingStacking(d, x, "top"));
                                })
                                .y0(function (d) {
                                    //return yScale(simpleStacking(d, x) - d[x]);
                                    return yScale(alternatingStacking(d, x, "bottom"));
                                })
                                .interpolate("basis");

                            //var movieLine = d3.svg.line()
                            //    .x(function (d) {
                            //        return xScale(d.day);
                            //    })
                            //    .y(function (d) {
                            //        return yScale(d[x]);
                            //    })
                            //    .interpolate("cardinal");

                            //console.log(movieLine);

                            d3.select("svg")
                             .append("path")
                             .style("id", x + "Area")
                             .attr("d", movieArea(data))
                             .attr("fill", fillScale(n))
                             .attr("stroke", "none")
                             .attr("stroke-width", 2)
                             .style("opacity", .5);

                            n++;
                        };
                    };

                    function simpleStacking(incomingData, incomingAttribute) {
                        var newHeight = 0;
                        for (x in incomingData) {
                            if (x != "day") {
                                newHeight += parseInt(incomingData[x]);
                                if (x == incomingAttribute) {
                                    break;
                                }
                            }
                        }
                        return newHeight;
                    }

                    function alternatingStacking(incomingData, incomingAttribute, topBottom) {
                        var newHeight = 0;
                        var skip = true;
                        for (x in incomingData) {
                            if (x != "day") {
                                if (x == "movie1" || skip == false) {
                                    newHeight += parseInt(incomingData[x]);
                                    if (x == incomingAttribute) {
                                        break;
                                    }
                                    if (skip == false) {
                                        skip = true;
                                    } else {
                                        n % 2 == 0 ? skip = false : skip = true;
                                    }
                                } else {
                                    skip = false;
                                }
                            }
                        }
                        if (topBottom == "bottom") {
                            newHeight = -newHeight;
                        }
                        if (n > 1 && n % 2 == 1 && topBottom == "bottom") {
                            newHeight = 0;
                        }
                        if (n > 1 && n % 2 == 0 && topBottom == "top") {
                            newHeight = 0;
                        }
                        return newHeight;
                    };
                }
            );
        });
    </script>
}