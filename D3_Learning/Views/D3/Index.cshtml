@{
    ViewBag.Title = "Index";
}

<style>
    div.chart {
        font-family: sans-serif;
        font-size: 0.7em;
    }
    div.bar {
        background-color: DarkRed;
        color: white;
        height: 3em;
        line-height: 3em;
        padding-right: 1em;
        margin-bottom: 3px;
        text-align: right;
        margin-left: 220px;
    }
    div.label {
        height:3em;
        line-height:3em;
        padding-right:1em;
        margin-bottom:2px;
        float:left;
        width:20em;
        text-align:right;
    }

    .axis {
        font-family: arial;
        font-size: 0.6em;
    }
    path {
        fill: none;
        stroke: black;
        stroke-width:2px;
        opacity: 0.3;
    }
    .tick {
        fill: none;
        stroke: black;
    }
    circle {
        stroke: black;
        stroke-width: 0.5px;
        fill: RoyalBlue;
        opacity: 0.6;
    }
    circle.times_square {
        fill: DeepPink;
    }
    circle.grand_central {
        fill: MediumSeaGreen;
    }
    path.times_square {
        stroke: DeepPink;
    }
    path.grand_central {
        stroke: MediumSeaGreen;
    }
</style>

<h2>D3</h2>
<hr />

<h3>Graphing Turnstile Traffic</h3>
<div id="graphingTurnstileTraffic"></div>
<hr />

<h3>Bus Breakdown, Accident, and Injury</h3>
<div id="busBreakdownAccidentAndInjury"></div>
<hr />

<h3>Graphing Mean Daily Plaza Traffic</h3>
<div id="meanDailyPlazaTraffic"></div>
<hr />

<h3>Building a Simple Subway Train Status Board</h3>
<div id="serviceStatus"></div>
<hr />

@section scripts{
    @Scripts.Render("~/bundles/d3")
    <script>

        'use strict';

        function drawServiceStatus(data) {
            // update
            var view = d3.select('#serviceStatus')
                .append('ul')
                .selectAll('li')
                .data(data);

            // enter
            view
                .enter()
                .append('li')
                    .style('color', function (d, i) {
                        if (d.Status === 1) {
                            return 'green';
                        } else {
                            return 'red';
                        }
                    })
                    .text(function (d) {
                        var statusText = 'Good Service';
                        if (d.Status === 0) statusText = 'Planned Work';
                        return d.Name + ": " + statusText;
                    });

            // exit
            view.exit().remove();
        }

        function drawMeanDailyPlazaTraffic(data) {
            // update 
            var view = d3.select('#meanDailyPlazaTraffic')
                .append('div').attr("class", "chart")
                .selectAll('div.line')
                .data(data);

            // enter 
            view.enter()
                .append('div')
                    .attr("class", "line");

            d3.selectAll('div.line')
                .append('div')
                    .attr("class", "label")
                    .text(function (d) { return d.Name });;

            d3.selectAll('div.line')
                .append('div')
                    .attr("class", "bar")
                    .style("width", function (d) { return d.Count / 100 + "px" })
                    .text(function (d) { return Math.round(d.Count) });

            // exit label
            view.exit().remove();

        }

        function drawBusBreakdownAccidentAndInjury(data) {
            var margin = 50,
                width = 700,
                height = 300,
                targetID = "#busBreakdownAccidentAndInjury";

            // Using extent and scale to Map Data to Pixels
            d3.select(targetID)
                .append("svg")
                    .attr("width", width)
                    .attr("height", height)
                .selectAll("circle")
                .data(data)
                .enter()
                .append("circle");

            var x_extent = d3.extent(data, function (d) { return d.CollisionWithInjury });

            var x_scale = d3.scale.linear()
                .range([margin, width - margin])
                .domain(x_extent);

            var y_extent = d3.extent(data, function (d) { return d.DistBetweenFail });
            var y_scale = d3.scale.linear()
                .range([height - margin, margin])
                .domain(y_extent);

            d3.selectAll(targetID + " circle")
                .attr("cx", function (d) { return x_scale(d.CollisionWithInjury) })
                .attr("cy", function (d) { return y_scale(d.DistBetweenFail) });

            d3.selectAll(targetID + " circle")
                .attr("r", 3);

            // Adding Axes
            var x_axis = d3.svg.axis().scale(x_scale);
            d3.select(targetID + " svg")
                .append("g")
                    .attr("class", "x axis")
                    .attr("transform", "translate(0," + (height - margin) + ")")
                .call(x_axis);

            var y_axis = d3.svg.axis().scale(y_scale).orient("left");
            d3.select(targetID + " svg")
                .append("g")
                    .attr("class", "y axis")
                    .attr("transform", "translate(" + margin + ", 0 )")
                .call(y_axis);

            // Adding Axis Titles
            d3.select(targetID + ".x.axis")
                .append("text")
                .text("collisions with injury (per million miles)")
                .attr("x", (width / 2) - margin)
                .attr("y", margin / 1.5);

            d3.select(targetID + ".y.axis")
                .append("text")
                .text("mean distance between failure (miles)")
                .attr("transform", "rotate (-90, -43, 0) translate(-280)");


        }

        function drawGraphingTurnstileTraffic(data) {
            var margin = 40,
                width = 700 - margin,
                height = 300 - margin,
                targetID = '#graphingTurnstileTraffic';

            d3.select(targetID)
                .append("svg")
                    .attr("width", width + margin)
                    .attr("height", height + margin)
                .append("g")
                .attr("class", "chart");

            d3.select(targetID + " svg")
                .selectAll("circle.times_square")
                .data(data.TimesSquare)
                .enter()
                .append("circle")
                    .attr("class", "times_square");

            d3.select(targetID + " svg")
                .selectAll("circle.grand_central")
                .data(data.GrandCentral)
                .enter()
                .append("circle")
                    .attr("class", "grand_central");

            var count_extent = d3.extent(
                data.GrandCentral,
                function (d) { return d.Count; }
            );
            var count_scale = d3.scale.linear()
                .domain(count_extent)
                .range([height, margin]);
            d3.selectAll(targetID + " circle")
                .attr("cy", function (d) { return count_scale(d.Count); });

            var time_extent = d3.extent(
                data.GrandCentral,
                function (d) { return d.Time; }
            );
            var time_scale = d3.time.scale()
                .domain(time_extent)
                .range([margin, width]);
            d3.selectAll(targetID + " circle")
                .attr("cx", function (d) { return time_scale(d.Time); });


            d3.selectAll(targetID + " circle")
                .attr("cy", function (d) { return count_scale(d.Count); })
                .attr("cx", function (d) { return time_scale(d.Time); })
                .attr("r", 3);

            var time_axis = d3.svg.axis()
                .scale(time_scale);
            d3.select(targetID + " svg")
                .append("g")
                    .attr("class", "x axis")
                    .attr("transform", "translate(0," + height + ")")
                .call(time_axis);

            var count_axis = d3.svg.axis()
                .scale(count_scale)
                .orient("left");
            d3.select(targetID + " svg")
                .append("g")
                .attr("class", "y axis")
                .attr("transform", "translate(" + margin + ",0)")
                .call(count_axis);

            var line = d3.svg.line()
                .x(function (d) { return time_scale(d.Time); })
                .y(function (d) { return count_scale(d.Count); });

            d3.select(targetID + " svg")
                .append("path")
                .attr("d", line(data.TimesSquare))
                .attr("class", "times_square");

            d3.select(targetID + " svg")
                .append("path")
                .attr("d", line(data.GrandCentral))
                .attr("class", "grand_central");

            d3.select(targetID + ".y.axis")
                .append("text")
                .text("mean number of turnstile revolutions")
                .attr("transform", "rotate (90, " + -margin + ", 0)")
                .attr("x", 20)
                .attr("y", 0);

            d3.select(targetID + ".x.axis")
                .append("text")
                .text("time")
                .attr("x", function () { return (width / 1.6) - margin; })
                .attr("y", margin / 1.5);

        }

        $(function () {
            d3.json('@Url.Action("GetServiceStatus", "D3")', drawServiceStatus);
            d3.json('@Url.Action("GetMeanDailyPlazaTraffic", "D3")', drawMeanDailyPlazaTraffic);
            d3.json('@Url.Action("GetBusBreakdownAccidentAndInjuryView", "D3")', drawBusBreakdownAccidentAndInjury);
            d3.json('@Url.Action("GetTurnstileTrafficView", "D3")', drawGraphingTurnstileTraffic);
        });
    </script>
}