@{
    ViewBag.Title = "Area";
}

<style>
    .axis text {
      font: 10px sans-serif;
    }

    .axis path,
    .axis line {
      fill: none;
      stroke: #000;
      stroke-opacity: 0.1;
      shape-rendering: crispEdges;
    }

    rect.pane {
      cursor: move;
      fill: none;
      pointer-events: all;
    }

</style>

<ol class="breadcrumb">
    <li><a href="#">World</a></li>
    <li class="active">Area</li>
</ol>

<h2>Area</h2>
<hr />
<div class="panel panel-default">
    <div class="panel-heading">World</div>
    <div class="panel-body">
        <svg class="area">

        </svg>
    </div>
</div>


@section scripts{
    <script>
        $(function () {
            var height = 500,
                width = 500,
                margin = 25,
                xAxisLength = width - 2 * margin,
                yAxisLength = height - 2 * margin;

            var svg = d3.select(".area")
                        .attr("class", "axis")
                        .attr("width", width)
                        .attr("height", height);

            var xScale = d3.scale.linear()
                    .domain([0, 100])
                    .range([0, xAxisLength]);

            var yScale = d3.scale.linear()
                            .domain([100, 0])
                            .range([0, yAxisLength]);

            function renderXAxis() {
                var xAxis = d3.svg.axis()
                            .scale(xScale)
                            .orient("bottom");

                svg.append("g")
                    .attr("class", "x-axis")
                    .attr("transform", function () { // <-A
                        return "translate(" + margin + "," + (height - margin)
                        + ")";
                    })
                    .call(xAxis);

                d3.selectAll("g.x-axis g.tick") // <-B
                    .append("line") // <-C
                    .classed("grid-line", true)
                    .attr("x1", 0) // <-D
                    .attr("y1", 0)
                    .attr("x2", 0)
                    .attr("y2", -(height - 2 * margin)); // <-E

                return xAxis;
            }

            function renderYAxis() {
                var yAxis = d3.svg.axis()
                    .scale(yScale)
                    .orient("left");

                svg.append("g")
                    .attr("class", "y-axis")
                    .attr("transform", function () {
                        return "translate(" + margin + "," + margin + ")";
                    })
                    .call(yAxis);

                d3.selectAll("g.y-axis g.tick")
                    .append("line")
                    .classed("grid-line", true)
                    .attr("x1", 0)
                    .attr("y1", 0)
                    .attr("x2", yAxisLength)
                    .attr("y2", 0);

                return yAxis;
            }

            var yAxis = renderYAxis();
            var xAxis = renderXAxis();

            var data = [
                { id: 1, x: 10, y: 20, m: 10 }
            ];

            var selection = svg
                .selectAll("circle")
                .data(data, function (d) { return d.id; });

            // enter
            selection.enter()
                .append("circle")
                .attr("cx", function (d) { return xScale(d.x); })
                .attr("cy", function (d) { return yScale(d.y); })
                .attr("r", 0);

            // update
            selection.transition().duration(500)
                .attr("r", function (d) { return d.m; });

            // exit
            selection.exit().remove();

            //var zoom = d3.behavior.zoom()
            //           .x(xScale)
            //           .y(yScale)
            //           .scaleExtent([1, 100])
            //           .on("zoom", zoomed);

            //function zoomed(e) {

            //    svg.select("g.x-axis").call(xAxis);
            //    svg.select("g.y-axis").call(yAxis);
            //}

            //svg.append("rect")
            //    .attr("class", "pane")
            //    .attr("width", width)
            //    .attr("height", height)
            //    .call(zoom);
        });
    </script>
}